{"version":3,"file":"static/js/835.1543e3f1.chunk.js","mappings":"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","sources":["components/MovieDetailsCard/MovieDetailsCard.styled.jsx","components/MovieDetailsCard/MovieDetailsCard.jsx","hooks/UseMovieDetails.jsx","pages/MovieDetails.js"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from 'styles';\n\nexport const Title = styled.h1`\n  margin-bottom: 16px;\n`;\nexport const Poster = styled.img`\n  width: 300px;\n  height: 400px;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n    rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  border-radius: 20px;\n`;\nexport const VoteAverage = styled.span`\n  margin-bottom: 15px;\n`;\nexport const Text = styled.p`\n  margin-bottom: 12px;\n`;\nexport const MovieWrapper = styled.div`\n  position: relative;\n  display: flex;\n  gap: 32px;\n  align-items: flex-start;\n  box-shadow: 0px 2px 8px 1px #8b0000;\n  border-radius: 20px;\n`;\n\nexport const BackBtn = styled.button`\n  padding: 5px 10px;\n  margin-bottom: 15px;\n  border-radius: 4px;\n  background-color: ${theme.colors.accent};\n  font-size: ${theme.fontSizes.medium};\n  font-weight: 500;\n  color: ${theme.colors.white};\n  border: 2px solid ${theme.colors.light};\n\n  transition: all ${theme.animations.cubicBezier};\n\n  &:hover,\n  &:focus {\n    background-color: ${theme.colors.white};\n    color: ${theme.colors.accent};\n  }\n`;\n\nexport const CastBtn = styled(BackBtn)``;\nexport const ReviewsBtn = styled(BackBtn)``;\nexport const LinkWrapper = styled.div`\n  position: absolute;\n  bottom: 15px;\n  right: 15px;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const DescriptionWrapper = styled.div`\n  margin-top: 10px;\n`;\n","import {\n  Title,\n  Poster,\n  VoteAverage,\n  Text,\n  DescriptionWrapper,\n} from './MovieDetailsCard.styled';\nimport 'react-toastify/dist/ReactToastify.css';\nconst imgUrl = 'https://image.tmdb.org/t/p/original/';\n\nexport const MovieDetailsCard = ({\n  details: { title, poster_path, vote_average, genres, overview, release_date },\n}) => {\n  const poster = imgUrl + poster_path;\n  const genresName = genres.map(genre => genre.name).join(' ,  ');\n\n  return (\n    <>\n      <Poster src={poster} alt={title} />\n      <DescriptionWrapper>\n        <Title>{title}</Title>\n        <VoteAverage>\n          <b>User score:</b> {Math.round(vote_average * 10)}%\n        </VoteAverage>\n        <Text>\n          <b>Genres:</b> {genresName}\n        </Text>\n        <Text>{overview}</Text>\n        <Text style={{ marginBottom: 0 }}>\n          <b>Release date: </b>\n          {release_date}\n        </Text>\n      </DescriptionWrapper>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'api';\n\nexport const UseMovieDetails = () => {\n  const { movieId } = useParams();\n  const [info, setInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    setIsLoading(true);\n\n    const getDetails = async id => {\n      try {\n        const details = await getMovieDetails(id, signal);\n        setInfo(details);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(true);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getDetails(movieId);\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return {\n    isLoading,\n    error,\n    info,\n  };\n};\n","import { MovieDetailsCard } from 'components/MovieDetailsCard/MovieDetailsCard';\nimport { Container, Section } from 'components/App/App.styled';\nimport { Suspense } from 'react';\nimport { Outlet, Link, useLocation } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { UseMovieDetails } from 'hooks/UseMovieDetails';\nimport {\n  MovieWrapper,\n  BackBtn,\n  CastBtn,\n  ReviewsBtn,\n  LinkWrapper,\n} from '../components/MovieDetailsCard/MovieDetailsCard.styled';\n\nexport default function MovieId() {\n  const { isLoading, error, info } = UseMovieDetails();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <main>\n      <Section>\n        <Container>\n          <Link to={backLinkHref}>\n            <BackBtn type=\"button\">Back</BackBtn>\n          </Link>\n          <MovieWrapper>\n            <LinkWrapper>\n              <Link to=\"cast\">\n                <CastBtn type=\"button\">Cast</CastBtn>\n              </Link>\n              <Link to=\"reviews\">\n                <ReviewsBtn type=\"button\">Reviews</ReviewsBtn>\n              </Link>\n            </LinkWrapper>\n            {isLoading && <Loader />}\n            {error && toast.error('Something went wront')}\n            {info && <MovieDetailsCard details={info} />}\n          </MovieWrapper>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </Container>\n      </Section>\n      <ToastContainer />\n    </main>\n  );\n}\n"],"names":["Title","styled","_templateObject","_taggedTemplateLiteral","Poster","_templateObject2","VoteAverage","_templateObject3","Text","_templateObject4","MovieWrapper","_templateObject5","BackBtn","_templateObject6","theme","CastBtn","_templateObject7","ReviewsBtn","_templateObject8","LinkWrapper","_templateObject9","DescriptionWrapper","_templateObject10","MovieDetailsCard","_ref","_ref$details","details","title","poster_path","vote_average","genres","overview","release_date","poster","genresName","map","genre","name","join","_jsxs","_Fragment","children","_jsx","src","alt","Math","round","style","marginBottom","UseMovieDetails","movieId","useParams","_useState","useState","_useState2","_slicedToArray","info","setInfo","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","controller","AbortController","signal","getDetails","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","getMovieDetails","sent","t0","code","finish","stop","_x","apply","arguments","abort","MovieId","_location$state$from","_location$state","_UseMovieDetails","backLinkHref","useLocation","state","from","Section","Container","Link","to","type","Loader","toast","Suspense","fallback","Outlet","ToastContainer"],"sourceRoot":""}